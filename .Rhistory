ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmasses, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4)
sample(1:20, 10)
LETTERS
sample(LETTERS)
prob = c(0.3, 0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob =0.7)
flips2 <- rbinom(1, size = 100, prob =0.7)
flips2 <- rbinom(100, size = 1, prob =0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d1)
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, title="My Plot"
)
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub="My Plot Subtitle"
)
plot(cars, sub = "My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim = c(10, 15))
plot(cars,pch = 2
)
load(mtcars)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
1
swirl()
5 + 7
x <- 5 + 7
x
y<- x - 3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z * 2 +100
my_sqrt <-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
(z * 2 + 100)
(z * 2 + 1000)
z * 2 +1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create('testdir')
setwd('testdir')
file.create('mytest.R')
list.files()
file.exists('mytest.R')
file.info('mytest.R')
file.rename('mytest.R','mytest2.R')
file.copy('mytest2.R','mytest3.R')
file.path('mytest3.R')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink('testdir2')
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
install.packages("RWeka")
install.packages("RWeka")
getRepositories()
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
install.packages("RWeka")
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
install.packages("RWeka")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?rbinom
x <- round(x / 10, 1)
mu <- 3.5           # μ = np
sigma2 <- 0.8       # σ² = np(1−p) = np - np²
np2 <- mu - sigma2  # np² = μ - σ² = np - (np - np²)
p <- np2 / mu       # p = np² / np = np² / μ
n <- mu / p         # n = np / p = μ / p
N <- 200
x <- rbinom(N, ceiling(n) * 10, p)
mean(x)
sd(x)
h <- hist(x, col = 'light blue')
write.csv(x, 'data.csv', row.names = F)
x
n
p
n * p
hist(rbinom(200, 5, .5))
?mvrnorm
set.seed(82)
xDf = matrix(NA, ncol=4, nrow=10000)
i   = 1
while(i<10001){
x       = rnorm(2)
xDf[i,] = try(find.yz(x, xbar=0, s2=2), silent=TRUE)  # keeps the code from crashing
if(!is.nan(xDf[i,4])){ i = i+1 }                      # increments if worked
}
xDf[1,]
xDf
x <- rnorm(n = 200, m = 3.5, sd = .8)
xtrunc <- x[x >= 0.2 & x <= 0.8]
xtrunc
require(logspline)
install.packages("logspline")
setRepositories(addURLs =
c(Vinastat = "http://cran.vinastat.com/"))
install.packages("logspline")
install.packages("ggplot2")
table(cut(rnorm(100),breaks=c(-10,-1,0,1,10)))
?cut
x <- cut(rnorm(200, 3.5, 0.8), breaks = c(1, 2, 3, 4, 5))
x
table(x)
x <- cut(rnorm(200, 3.5, 0.8), breaks = c(0, 1, 2, 3, 4, 5))
table(x)
hist(x)
y <- rep(0:5, table(x))
as.vector(table(x))
y <- rep(1:5, as.vector(table(x))
)
y
hist(y)
summary(y)
sd(y)
x <- cut(rnorm(200, 3.5, 0.8), breaks = c(0, 1, 2, 3, 4, 5))
x
x <- rnorm(200, 3.5, 0.8)
x
?cut
cut(x, breaks = 5)
y <- rep(1:5, as.vector(table(cut(x, breaks = 5))
)
)
hist(y)
y
mean(y)
sd(y)
qqline(y)
qqlot(y);qqline(y);
qqplot(y);qqline(y);
x <- cut(rnorm(200, 3.5, 0.8), breaks = c(0, 1, 2, 3, 4, 5))
x
table(x)
x <- rnorm(200, 3.5, 0.8)
y <- cut(x, breaks = c(0, 1, 2, 3, 4, 5))
y
x
y <- cut(x, breaks = c(-1, 1, 2, 3, 4, 6))
y
table(y)
y <- cut(rnorm(200, 3.5, 0.8), breaks = c(-1, 1, 2, 3, 4, 6))
y
y <- cut(rnorm(200, 3.5, 0.8), breaks = c(-1, 1, 2, 3, 4, 6))
table(y)
ceiling(3.5 * 3.5 / (3.5 - 0.8))
x <- rbinom(N, ceiling(3.5 * 3.5 / (3.5 - 0.8)), (3.5 - 0.8) / 3.5)
mean(x)
sd(x)
h <- hist(x, col = 'light blue')
xcut <- cut(rnorm(200, 3.5, 0.8), breaks = c(-1, 1, 2, 3, 4, 6))
x <- rep(1:5, as.vector(table(xcut)))
mean(x)
sd(x)
h <- hist(x, col = 'light blue')
x
xcut <- cut(rnorm(200, 3.5, 0.8), breaks = c(-1, 1, 2, 3, 4, 6))
x <- rep(1:5, as.vector(table(xcut)))
mean(x)
sd(x)
h <- hist(x, col = 'light blue')
xcut <- cut(rnorm(200, 3.5, 0.8), breaks = c(-1, 1, 2, 3, 4, 6))
x <- rep(1:5, as.vector(table(xcut)))
mean(x)
sd(x)
h <- hist(x, col = 'light blue')
set.seed(1234)
library(e1071)
probs < - cbind(c(.4,.2/3,.2/3,.2/3,.4),c(.1/4,.1/4,.9,.1/4,.1/4),c(.2,.2,.2,.2,.2))
my.n <- 100
my.len <- ncol(probs)*my.n
raw <- matrix(NA,nrow=my.len,ncol=2)
raw <- NULL
for(i in 1:ncol(probs)){
raw <- rbind(raw, cbind(i,rdiscrete(my.n,probs=probs[,i],values=1:5)))
}
raw <- data.frame(raw)
names(raw) <- c("group","value")
raw$group <- as.factor(raw$group)
raw.1.2 <- subset(raw, raw$group %in% c(1,2))
install.packages("irutils")
?likert
install.packages("reshape2")
install.packages("stringr")
x <- sample(1:5, 82, replace=TRUE)
hist(x)
?likert
library(reshape2)
?likert
xcut <- cut(rnorm(200, 3.5, 0.8), breaks = c(-1, 1, 2, 3, 4, 6))
x <- rep(1:5, as.vector(table(xcut)))
mean(x)
sd(x)
h <- hist(x, col = 'light blue')
qqnorm(x); qqline(x, col = 2)
qqplot(x, rt(300, df = 5));
qqnorm(x); qqline(x, col = 2);
shapiro.test(x)
qqplot(x, rt(300, df = 5))
install.packages("grid")
install.packages("sjPlot")
x <- rbinom(200, ceiling(3.5 * 3.5 / (3.5 - 0.8)), (3.5 - 0.8) / 3.5)
mean(x)
sd(x)
hist(x, col = 'light blue')
write.csv(x, 'data.csv', row.names = F)
shapiro.test(x)
shapiro.test(rnorm(200, 3.5, .8))
?shapiro.test
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(runif(100, min = 2, max = 4))
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(x)
x <- rbinom(2000, ceiling(3.5 * 3.5 / (3.5 - 0.8)), (3.5 - 0.8) / 3.5)
mean(x)
sd(x)
hist(x, col = 'light blue')
write.csv(x, 'data.csv', row.names = F)
shapiro.test(x)
xcut <- cut(rnorm(200, 3.5, 0.8), breaks = c(-1, 1, 2, 3, 4, 6))
x <- rep(1:5, as.vector(table(xcut)))
mean(x)
sd(x)
h <- hist(x, col = 'light blue')
shapiro.test(x)
xcut <- cut(rnorm(2000, 3.5, 0.8), breaks = c(-1, 1, 2, 3, 4, 6))
x <- rep(1:5, as.vector(table(xcut)))
mean(x)
sd(x)
h <- hist(x, col = 'light blue')
shapiro.test(x)
install.packages("likert")
likert::likert(x)
items <- list(c("Q1", "Q2", "Q3", "Q4", "Q5"))
likert::likert(x, items)
sjp.likert(x, legendLabels=items)
library(sjPlot)
sjp.likert(x, legendLabels=items)
xcut <- cut(rnorm(200, 3.5, 0.8), breaks = c(-1, 1, 2, 3, 4, 6))
x <- rep(1:5, as.vector(table(xcut)))
mean(x)
sd(x)
h <- hist(x, col = 'light blue')
sjp.likert(x, legendLabels=items)
items <- list(c("1", "2", "3", "4", "5"))
sjp.likert(x, legendLabels=items)
levels = c("Strongly Disagree", "Disagree", "Neither Agree nor Disagree", "Agree", "Strongly Agree")
setwd("D:/BaiduYunDownload/RepData_PeerAssessment1")
colnames(sumPerDay)[2] <- 'sum'
data <- read.csv('./activity.csv', na.strings = 'NA', stringsAsFactors = FALSE)
data
head(data)
data$date <- as.Date(data$date, '%Y-%m-%d')
head(data)
sumPerDay <- aggregate(data$steps ~ data$date, FUN = sum)
head(sumPerDay)
colnames(sumPerDay)[2] <- 'sum'
hist(sumPerDay$sum, main = 'Total number of steps taken each day', xlab = 'sum(Steps)')
meanOfSums <- mean(sumPerDay$sum)
meanOfSums
medianOfSums <- median(sumPerDay$sum)
medianOfSums
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
head(meanPerInterval)
sumByDay <- aggregate(data$steps ~ data$date, FUN = sum)
colnames(sumByDay)[2] <- 'sum'
hist(sumByDay$sum, main = 'Total number of steps taken each day', xlab = 'sum(steps)')
meanOfSums <- mean(sumByDay$sum)
meanOfSums
medianOfSums <- median(sumByDay$sum)
medianOfSums
meanByInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
plot(meanByInterval, type = 'l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps', col = 'blue')
names(meanByInterval) <- c('interval', 'steps')
sortedMeanByInterval <- meanByInterval[order(meanByInterval$steps, decreasing = 'TRUE'),]
intervalMaxSteps <- sortedMeanByInterval[1, 1]
intervalMaxSteps
names(meanByInterval) <- c('interval', 'steps')
meanByInterval
head(meanByInterval)
unzip('./activity.zip', exdir = '.')
data <- read.csv('./activity.csv', na.strings = 'NA', stringsAsFactors = FALSE)
data$date <- as.Date(data$date, '%Y-%m-%d')
mean(sumPerDay$sum)
median(sumPerDay$sum)
hist(sumPerDay$sum, main = 'Total number of steps taken each day', xlab = 'Sum(steps)')
head(sumPerDay)
unzip('./repdata-data-activity.zip', exdir = '.')
data <- read.csv('./activity.csv', na.strings = 'NA', stringsAsFactors = FALSE)
data$date <- as.Date(data$date, '%Y-%m-%d')
sumPerDay <- aggregate(data$steps ~ data$date, FUN = sum)
colnames(sumPerDay)[2] <- 'sum'
hist(sumPerDay$sum, main = 'Total number of steps taken each day', xlab = 'Sum(steps)')
mean(sumPerDay$sum)
median(sumPerDay$sum)
library(lattice)
hist(sumPerDay$sum, main = 'Total number of steps taken each day', xlab = 'Sum(steps)')
histogram(sumPerDay$sum, main = 'Total number of steps taken each day', xlab = 'Sum(steps)')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
xyplot(meanPerInterval, type = 'l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps', col = 'blue')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
plot(meanPerInterval, type = 'l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps', col = 'blue')
hist(sumPerDay$sum, main = 'Total number of steps taken each day', xlab = 'Sum(steps)')
library(lattice)
histogram(sumPerDay$sum, main = 'Total number of steps taken each day', xlab = 'Sum(steps)')
mean <- mean(sumPerDay$sum)
stepsPerInterval <- aggregate(dataSteps$steps, by=list(interval=dataSteps$interval), mean, na.rm=TRUE)
stepsPerInterval <- aggregate(data$steps, by=list(interval=data$interval), mean, na.rm=TRUE)
head(stepsPerInterval)
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean, na.rm = T)
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
unzip('./repdata-data-activity.zip', exdir = '.')
data <- read.csv('./activity.csv', na.strings = 'NA', stringsAsFactors = FALSE)
data$date <- as.Date(data$date, '%Y-%m-%d')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
head(data)
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
data <- read.csv('./activity.csv', na.strings = 'NA', stringsAsFactors = FALSE)
data$date <- as.Date(data$date, '%Y-%m-%d')
sumPerDay <- aggregate(data$steps ~ data$date,FUN = sum)
colnames(sumPerDay)[2] <- 'sum'
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
data <- read.csv('./activity.csv', na.strings = 'NA', stringsAsFactors = FALSE)
data$date <- as.Date(data$date, '%Y-%m-%d')
sumPerDay <- aggregate(data$steps ~ data$date, FUN = sum)
colnames(sumPerDay)[2] <- 'steps'
library(lattice)
histogram(sumPerDay$steps, main = 'Total number of steps taken each day', xlab = 'Sum(steps)')
meanSumPerDay <- mean(sumPerDay$steps)
medianSumPerDay <- median(sumPerDay$steps)
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
head(meanPerInterval)
stepsPerInterval <- aggregate(dataSteps$steps, by=list(interval=dataSteps$interval), mean, na.rm=TRUE)
stepsPerInterval <- aggregate(data$steps, by=list(interval=data$interval), mean, na.rm=TRUE)
head(stepsPerInterval)
xyplot(meanPerInterval$steps ~ meanPerInterval$interval, type='l')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean, na.rm = T)
xyplot(meanPerInterval$steps ~ meanPerInterval$interval, type='l')
plot(meanPerInterval, type = 'l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps', col = 'blue')
stepsPerInterval <- aggregate(data$steps, by=list(interval=data$interval), mean, na.rm=TRUE)
xyplot(stepsPerInterval$x ~ stepsPerInterval$interval, type='l')
dim(stepsPerInterval)
dim(meanPerInterval)
cols(meanPerInterval)
col(meanPerInterval)
head(meanPerInterval)
head(stepsPerInterval)
xyplot(steps ~ interval, data = meanPerInterval, type = 'l')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean, na.rm = T)
plot(meanPerInterval, type = 'l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps', col = 'blue')
stepsPerInterval <- aggregate(data$steps, by=list(interval=data$interval), mean, na.rm=TRUE)
xyplot(stepsPerInterval$x ~ stepsPerInterval$interval, type='l')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean, na.rm = T)
plot(meanPerInterval, type = 'l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps', col = 'blue')
xyplot(stepsPerInterval$x ~ stepsPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
stepsPerInterval <- aggregate(data$steps, by = list(interval = data$interval), mean)
xyplot(stepsPerInterval$x ~ stepsPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
stepsPerInterval <- aggregate(data$steps, by = list(interval = data$interval), mean, na.rm=TRUE)
xyplot(stepsPerInterval$x ~ stepsPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean, na.rm = T)
plot(meanPerInterval, type = 'l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps', col = 'blue')
xyplot(meanPerInterval$steps ~ meanPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
xyplot(meanPerInterval$steps ~ meanPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
colnames(meanPerInterval)[1] <- 'x'
xyplot(meanPerInterval$x ~ meanPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean, na.rm = T)
head(meanPerInterval)
head(stepsPerInterval)
colnames(meanPerInterval) <- c(interval, 'x')
colnames(meanPerInterval) <- c('interval', 'x')
head(meanPerInterval)
xyplot(meanPerInterval$x ~ meanPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean, na.rm = T)
colnames(meanPerInterval) <- c('interval', 'steps')
xyplot(meanPerInterval$steps ~ meanPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean, na.rm = T)
plot(meanPerInterval, type = 'l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps', col = 'blue')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean, na.rm = T)
colnames(meanPerInterval) <- c('interval', 'steps')
xyplot(meanPerInterval$steps ~ meanPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
meanPerInterval <- aggregate(data$steps ~ data$interval, FUN = mean)
colnames(meanPerInterval) <- c('interval', 'steps')
xyplot(meanPerInterval$steps ~ meanPerInterval$interval, type='l', main = '5-min interval vs Average number of steps by interval', xlab = 'Intervals', ylab = 'Average number of steps')
sortedMeanPerInterval <- meanPerInterval[order(meanPerInterval$steps, decreasing = 'TRUE'),]
intervalMaxSteps <- sortedMeanPerInterval[1, 1]
intervalMaxSteps
sortedMeanPerInterval[1,]
intervalMaxSteps <- sortedMeanPerInterval[1,]
intervalMaxSteps
intervalMaxSteps[0]
intervalMaxSteps[,0]
intervalMaxSteps[1,1]
intervalMaxSteps[1,2]
data
